q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
q()
remove.packages("R2easyR")
devtools::install_github("JPSieg/R2easyR")
?R2easyR::add.dot.bracket
.rs.restartR()
library(R2easyR)
.rs.restartR()
r2easyR.color()
?.rs.restartR
??.rs.restartR
q()
setwd("~/Jacob/R_packages/R2easyR")
setwd("~/Jacob/R_packages/R2easyR")
library(R2easyR)
df <- read.csv("Simple_RNA.csv")
setwd("~/Jacob/Research/Protocols/R2easyR_protocol/Video_tutorial_1_simple_RNA")
setwd("~/Jacob/Research/Protocols/R2easyR_protocol/Video_tutorial_1_simple_RNA")
df <- read.csv("Simple_RNA.csv")
head(df)
setwd("~/Jacob/Research/Protocols/R2easyR_protocol/Video_tutorial_2_starting_with_a_CT_file")
setwd("~/Jacob/Research/Protocols/R2easyR_protocol/Video_tutorial_2_starting_with_a_CT_file")
df <- read.ct("16_mRNA_800_to_850_Fold_22C.ct")
head(df)
df <- add.dot.bracket(df)
head(df)
list.files()
shape <- read.shape("16_mRNA_800_to_850_22C.shape")
shape
df$Reactivity <- shape
head(df)
palettes <- r2easyR.palettes()
palettes$PuRd.c
palettes$Reds.c
a <- c("green", "yellow", "Red")
a
test.pal <- r2easyR.custom.palette(a)
a
test.pal
df <- r2easyR.color(df,
palettes$Reds.c)
head(df)
df <- r2easyR.color(df,
palettes$Reds.c,
abs_reactivity_threshold = 0.1)
head(df)
df <- r2easyR.color(df,
palettes$Reds.c,
abs_reactivity_threshold = 0.2)
head(df)
?r2easyR.color
hist(df$Reactivity)
df <- r2easyR.color(df,
palettes$Reds.c,
abs_reactivity_threshold = 0.2,
manual.scale = c(0, 2))
head(df)
r2easyR.write("Example", df, colors = "circles")
list.files()
list.files()
df <- read.ct("16_mRNA_800_to_850_Fold_22C.ct")
head(df)
df <- add.dot.bracket(df)
head(df)
?read.react
?read.shape
list.files()
shape <- read.shape("16_mRNA_800_to_850_22C.shape")
shape
df$Reactivity <- shape
head(df)
palettes <- r2easyR.palettes()
palettes$Reds.c
?r2easyR.color
hist(df$Reactivity)
df <- r2easyR.color(df,
palettes$Reds.c,
abs_reactivity_threshold = 0.2,
manual.scale = c(0, 2))
head(df)
?r2easyR.write
r2easyR.write("Example", df, colors = "circles")
df <- read.ct("16_mRNA_800_to_850_Fold_22C.ct")
head(df)
df <- add.dot.bracket(df)
View(df)
ctdata_frame = df
dotbracket <- c()
#'Converts RNA secondary structure information in a .ct file into dot-bracket notation
#'
#'This function reformats information in a dataframe, made from reading a .ct file into R,
#'into the dot-bracket notation.
#'
#'@param ctdata_frame A data frame made by reading a .ct file into R with read.ct
#'@return A data frame containing a collumn with dot-bracket formated RNA secondary structure
#' @export
add.dot.bracket = function(ctdata_frame){
dotbracket <- c()
for (i in c(1:length(ctdata_frame$N))){
if (ctdata_frame$BP[i] == 0){
dotbracket[i] <- "."
}
else{
if (as.numeric(ctdata_frame$BP[i]) > as.numeric(ctdata_frame$N[i])){ dotbracket[i] <- "<" }
if (as.numeric(ctdata_frame$BP[i]) < as.numeric(ctdata_frame$N[i])){ dotbracket[i] <- ">" }
}
}
ctdata_frame$Dotbracket <- dotbracket
output <- ctdata_frame
}
df <- add.dot.bracket(df)
View(df)
ctdata_frame$BP[i] == 0
i = 19
ctdata_frame$BP[i] == 0
as.numeric(ctdata_frame$BP[i]) > as.numeric(ctdata_frame$N[i])
as.numeric(ctdata_frame$BP[i]) < as.numeric(ctdata_frame$N[i])
as.numeric(ctdata_frame$BP[i]
)
dotbracket <- c()
for (i in c(1:length(ctdata_frame$N))){
print(ctdata_frame$N[i])
if (ctdata_frame$BP[i] == 0){
dotbracket[i] <- "."
}
else{
if (as.numeric(ctdata_frame$BP[i]) > as.numeric(ctdata_frame$N[i])){ dotbracket[i] <- "<" }
if (as.numeric(ctdata_frame$BP[i]) < as.numeric(ctdata_frame$N[i])){ dotbracket[i] <- ">" }
}
}
#'Converts RNA secondary structure information in a .ct file into dot-bracket notation
#'
#'This function reformats information in a dataframe, made from reading a .ct file into R,
#'into the dot-bracket notation.
#'
#'@param ctdata_frame A data frame made by reading a .ct file into R with read.ct
#'@return A data frame containing a collumn with dot-bracket formated RNA secondary structure
#' @export
add.dot.bracket = function(ctdata_frame){
dotbracket <- c()
for (i in c(1:length(ctdata_frame$N))){
if (ctdata_frame$BP[i] == 0){
dotbracket[i] <- "."
}
else{
if (as.numeric(as.character(ctdata_frame$BP[i])) > as.numeric(as.character(ctdata_frame$N[i]))){ dotbracket[i] <- "<" }
if (as.numeric(as.character(ctdata_frame$BP[i])) < as.numeric(as.character(ctdata_frame$N[i]))){ dotbracket[i] <- ">" }
}
}
ctdata_frame$Dotbracket <- dotbracket
output <- ctdata_frame
}
df <- add.dot.bracket(df)
View(df)
#'Generates a Stockholm file and a R2R meta file that can be read by R2R to draw a secondary structure.
#'
#'@param output Path to the output Stockholm file
#'@param data_frame A data_frame containing columns labeled "Nucleotide", "Dotbracket", "Labels", and "Colors".
#'@param RNA_name The name of the RNA that you are drawing
#'@param colors How R2R will draw reactivity colors. No colors = "NA". Colored letters = "letters". Colored circles = "circles".
#'@return A Stockholm formated file.
#' @export
r2easyR.write = function(output,
data_frame,
RNA_name = "default",
colors = "NA"){
if(colors == "NA"){
fileConn<-file(paste(output, ".sto", sep = ""))
writeLines(c("# STOCKHOLM 1.0",
paste(RNA_name, gsub("T", "U", gsub(" ", "", gsub(",", "", toString(R.utils::capitalize(data_frame$Nucleotide))))), sep = "\t"),
paste("#=GC SS_cons", gsub(", ", "", toString(data_frame$Dotbracket)), sep = "\t"),
paste("#=GC R2R_LABEL", gsub(", ", "", toString(rep(".", length(data_frame$Labels)))), sep = "\t"),
paste("#=GC cons", gsub("T", "U", gsub(" ", "", gsub(",", "", toString(R.utils::capitalize(data_frame$Nucleotide))))), sep = "\t"),
paste("#=GC conss", gsub(", ", "", toString(rep("2", length(data_frame$Nucleotide)))), sep = "\t"),
paste("#=GC cov_SS_cons", gsub(", ", "", toString(rep("3", length(data_frame$Nucleotide)))), sep = "\t"),
paste("#=GF R2R tick_label_regular_numbering ", data_frame$N[1], " 10 firstNucNum ", data_frame$N[1], sep = ""),
"//"),
fileConn)
close(fileConn)
}
if(colors == "circles"){
a <- c()
n <- which(data_frame$Labels != "0")
if (length(n) != 0){
for (i in c(1:length(n))){
a[i] <- paste("#=GF R2R circle_nuc #:", n[i]-1, " rgb:", col2rgb(data_frame$Colors[n[i]])[1,1], ",", col2rgb(data_frame$Colors[n[i]])[2,1], ",", col2rgb(data_frame$Colors[n[i]])[3,1], sep ="")
}
fileConn<-file(paste(output, ".sto", sep = ""))
writeLines(c("# STOCKHOLM 1.0",
paste(RNA_name, gsub("T", "U", gsub(" ", "", gsub(",", "", toString(R.utils::capitalize(data_frame$Nucleotide))))), sep = "\t"),
paste("#=GC SS_cons", gsub(", ", "", toString(data_frame$Dotbracket)), sep = "\t"),
paste("#=GC R2R_LABEL", gsub(", ", "", toString(rep(".", length(data_frame$Labels)))), sep = "\t"),
paste("#=GC cons", gsub("T", "U", gsub(" ", "", gsub(",", "", toString(R.utils::capitalize(data_frame$Nucleotide))))), sep = "\t"),
paste("#=GC conss", gsub(", ", "", toString(rep("2", length(data_frame$Nucleotide)))), sep = "\t"),
paste("#=GC cov_SS_cons", gsub(", ", "", toString(rep("3", length(data_frame$Nucleotide)))), sep = "\t"),
gsub(", ", "\n",toString(unique(a))),
"#=GF R2R SetDrawingParam nucShrinkWithCircleNuc 1 pairBondScaleWithCircleNuc 1",
paste("#=GF R2R tick_label_regular_numbering ", data_frame$N[1], " 10 firstNucNum ", data_frame$N[1], sep = ""),
"//"),
fileConn)
close(fileConn)
}
if (length(n) == 0){
fileConn<-file(paste(output, ".sto", sep = ""))
writeLines(c("# STOCKHOLM 1.0",
paste(RNA_name, gsub("T", "U", gsub(" ", "", gsub(",", "", toString(R.utils::capitalize(data_frame$Nucleotide))))), sep = "\t"),
paste("#=GC SS_cons", gsub(", ", "", toString(data_frame$Dotbracket)), sep = "\t"),
paste("#=GC R2R_LABEL", gsub(", ", "", toString(rep(".", length(data_frame$Labels)))), sep = "\t"),
paste("#=GC cons", gsub("T", "U", gsub(" ", "", gsub(",", "", toString(R.utils::capitalize(data_frame$Nucleotide))))), sep = "\t"),
paste("#=GC conss", gsub(", ", "", toString(rep("2", length(data_frame$Nucleotide)))), sep = "\t"),
paste("#=GC cov_SS_cons", gsub(", ", "", toString(rep("3", length(data_frame$Nucleotide)))), sep = "\t"),
"#=GF R2R SetDrawingParam nucShrinkWithCircleNuc 1 pairBondScaleWithCircleNuc 1",
paste("#=GF R2R tick_label_regular_numbering ", data_frame$N[1], " 10 firstNucNum ", data_frame$N[1], sep = ""),
"//"),
fileConn)
close(fileConn)
}
}
if(colors == "letters"){
a <- c()
for (i in c(1:length(data_frame$Colors))){
a[i] <- paste("#=GF R2R nuc_color #:", i-1, " rgb:", col2rgb(data_frame$Colors[i])[1,1], ",", col2rgb(data_frame$Colors[i])[2,1], ",",col2rgb(data_frame$Colors[i])[3,1], sep ="")
}
fileConn<-file(paste(output, ".sto", sep = ""))
writeLines(c("# STOCKHOLM 1.0",
paste(RNA_name, gsub("T", "U", gsub(" ", "", gsub(",", "", toString(R.utils::capitalize(data_frame$Nucleotide))))), sep = "\t"),
paste("#=GC SS_cons", gsub(", ", "", toString(data_frame$Dotbracket)), sep = "\t"),
paste("#=GC R2R_LABEL", gsub(", ", "", toString(rep(".", length(data_frame$Labels)))), sep = "\t"),
paste("#=GC cons", gsub("T", "U", gsub(" ", "", gsub(",", "", toString(R.utils::capitalize(data_frame$Nucleotide))))), sep = "\t"),
paste("#=GC conss", gsub(", ", "", toString(rep("2", length(data_frame$Nucleotide)))), sep = "\t"),
paste("#=GC cov_SS_cons", gsub(", ", "", toString(rep("3", length(data_frame$Nucleotide)))), sep = "\t"),
gsub(", ", "\n",toString(unique(a))),
paste("#=GF R2R tick_label_regular_numbering ", data_frame$N[1], " 10 firstNucNum ", data_frame$N[1], sep = ""),
"//"),
fileConn)
close(fileConn)
}
meta <- file(paste(output, ".r2r_meta", sep = ""))
writeLines(c(paste(output, ".sto", "\t", "oneseq", "\t", RNA_name, sep = "")),
meta)
close(meta)
}
list.files()
shape <- read.shape("16_mRNA_800_to_850_22C.shape")
shape
df$Reactivity <- shape
head(df)
palettes <- r2easyR.palettes()
palettes$Reds.c
?r2easyR.color
hist(df$Reactivity)
df <- r2easyR.color(df,
palettes$Reds.c,
abs_reactivity_threshold = 0.2,
manual.scale = c(0, 2))
head(df)
?r2easyR.write
r2easyR.write("Example", df, colors = "circles")
